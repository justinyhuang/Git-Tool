{"tagline":"Simply the use of Git, focus on your own work","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Git, though powerful and popular, in most cases is too complicated to use. The command set is huge,\r\nthe parameters are too many, the design is sophisticated and hense the learning period is too long.\r\nFor some one who wants only a tool to manage his/her source code or document, to master Git and\r\nmake it work requires too much learning.\r\n(I bet most of the Git users keep a ProGit or something similar on hand)\r\nI have many questions since using Git:\r\n    Why use different command for similar requests?\r\n    Why type long command + parameters when the requirement is simple?\r\n    What is 'stage' and why one has to understand this when all needed is to back up my changes?\r\n\r\nThis is why GitTool is here.\r\nGitTool tries to simplify the use of git providing simple yet powerful interfaces to the user.\r\nGitTool learns Git so you don't have to =)\r\n\r\nTARGET USER\r\nGitTool is specialized for those who need to use git everyday but don't like to master the tool.\r\nThese users only need git to help managing changes of their work, as well as communicating with\r\nothers via Git. Spending time to know 1001 ways of using git is unacceptable for them.\r\n\r\nFEATURES\r\n- Easy, short yet powerful commands. In most cases a GitTool command varies from 3 to 5 characters\r\n  Very few arguments are required. Some examples are given below as comparison: (what Git command\r\n  will need to accomplish the same task?)\r\n\r\n  To show changed but not commited files\r\n  GitTool Command: gst\r\n\r\n  To show changed files between working copy and the remote tracked branch\r\n  GitTool Command: gstr\r\n\r\n  To show changed files between working copy and version/branch xxx\r\n  GitTool Command: gst xxx\r\n\r\n  To check the logs of latest 3 commits\r\n  GitTool Command: gls 3\r\n\r\n  To check the logs of latest 3 commits, in a graphical version tree\r\n  GitTool Command: glsg 3\r\n\r\n  To do a diff of the changed files between version xxx and yyy\r\n  GitTool Command: gdi xxx..yyy\r\n\r\n  To do a diff with vimdiff in a remote-connection, and meld in a local workstation, and bc3 when\r\n  someone like to see it in bcompare\r\n  GitTool Command: gdi/gdi2/gdi3\r\n  * tools used in gdi/gdi2/gdi3 are set during installation of the tool\r\n\r\n  and many other use cases....\r\n\r\n- Graphic git history presentation. A slightly better graphical presentation compared to those by other tools like gitk.\r\n  For example, to show a graphical version tree of the last 10 nodes, 'gifg 10' will show you the graph.\r\n  Powered by Graphviz and qiv.\r\n\r\n- Iterative mode. In many cases you will be give a list of branches/changed files/repositories.\r\n  You can manipulate branches/files/repositories easily with a few key strokes.\r\n\r\n- View configuration similar to ClearCase. GitTool provides a means to select files from different commits/versions, yet with some version control capabilities. [to be implemented]\r\n\r\nINSTALL\r\n\"Why do I need to install?\"\r\nGitTool works in a way similar to 'busybox'. That is, many symbolic links pointed to\r\nthe same executable. It needs to know your bin directory to put the symbolic link\r\nfiles. GitTool have to backup your .gitconfig file before adding GitTool specific\r\nsettings later. It also will ask for your preference to using the tool after setup,\r\nfor example your choices of diff tools.\r\n\r\nInstalling GitTool is simple. Just run 'git_tool_box.py' directly and answer\r\nthe questions along the setup process. The tool will setup itself and ready for use.\r\n\r\nCOLORED TEXT\r\nDuring the setup process, GitTool asks if colored text is supported in your environment,\r\nwith an example of colored text. We recommend saying yes, as many GitTool features\r\ndepend on the ability to show texts in different colors.\r\n\r\nPROMPT MODE\r\nThere are many cases where you will be asked for choices or answers when GitTool shows\r\na line and waits for your input with a prompt (by default it is a ':>' sign). This is\r\ncalled the Prompt Mode in GitTool.\r\nGitTool enters the Prompt Mode when user intervention is required, and it tries to ask\r\nquestions in the shortest way. Because as you use the tool, you become familiar with\r\nwhat it is asking. For new users, one can always try the\r\n\r\n   *help command*\r\n   When in Prompt Mode, type '\\h' to get help messages if there is any. In you have\r\n   colored text enabled when setting up GitTool, there is an easy way to tell if help\r\n   message is available:\r\n   There is help messages if the prompt sign changes color.(default color with help is\r\n   light blue)\r\n\r\nOr if you decide to quit instead of answering the question, use the\r\n\r\n   *exit command*\r\n   When in Prompt Mode, type '\\e' to safely exiting GitTool.\r\n\r\nThere is yet another command that is useful in use cases like being shown a list of\r\nbranches and you would like to delete one of them. That is the\r\n\r\n   *delete command*\r\n   When in the Prompt Mode and a lost of items are shown, type '\\d' followed by the index\r\n   of the item to delete it, no matter what the item is: a branch, a history entry or\r\n   a file shown in a diff-file list (Right! That could be 'git checkout', or 'git reset',\r\n   or whatever effort you would pay to reverse a change you made to a file)\r\n\r\nHOWTO GET HELP\r\nAfter installation, 'ghelp' will show you a list of available services with a brief\r\ndescription. Use 'ghelp <command>' for detailed information of the corresponding command.\r\nYou can also put a '?' after the command to get the help message, which is equal to\r\n'ghelp <command>'\r\n\r\nI DONT LIKE IT\r\n'git_tool_box.py clean' will help you remove GitTool and recover your .gitconfig file.\r\nAfter that 'rm -fr <dir of GitTool>' and you won't see GitTool anymore.\r\n\r\nBut...why?\r\n","name":"GitTool","google":""}